{
  "stats": {
    "suites": 14,
    "tests": 13,
    "passes": 6,
    "pending": 0,
    "failures": 7,
    "start": "2017-05-16T01:08:42.592Z",
    "end": "2017-05-16T01:09:08.166Z",
    "duration": 25574,
    "testsRegistered": 13,
    "passPercent": 46.2,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Project 2 Health Check",
        "suites": [
          {
            "title": "Illegal Operations: ryan, martin, jieun, emily",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Illegal Operations: ryan, martin, jieun, emily should render render an app home page",
                "timedOut": false,
                "duration": 999,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://illegal-formation.herokuapp.com/\",\n  \"assets/00-Illegal-Operations_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "614a92e5-7655-4a2a-b7d9-8908fb763ccd",
                "parentUUID": "51e432be-c8f9-4e04-ae4c-11f9d3d40585",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "51e432be-c8f9-4e04-ae4c-11f9d3d40585",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Illegal Operations: ryan, martin, jieun, emily should render render an app home page",
                "timedOut": false,
                "duration": 999,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://illegal-formation.herokuapp.com/\",\n  \"assets/00-Illegal-Operations_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "614a92e5-7655-4a2a-b7d9-8908fb763ccd",
                "parentUUID": "51e432be-c8f9-4e04-ae4c-11f9d3d40585",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 999,
            "rootEmpty": false
          },
          {
            "title": "Tab Nabbers: cody, eric g, esterling, ashley",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Tab Nabbers: cody, eric g, esterling, ashley should render render an app home page",
                "timedOut": false,
                "duration": 7244,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://bootcruit.herokuapp.com\",\n  \"assets/01-Tab-Nabbers_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "44bbec77-f868-447e-9ef3-4137be728947",
                "parentUUID": "29fcad8b-557d-43e6-a798-aa42c3f4fa15",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "29fcad8b-557d-43e6-a798-aa42c3f4fa15",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Tab Nabbers: cody, eric g, esterling, ashley should render render an app home page",
                "timedOut": false,
                "duration": 7244,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://bootcruit.herokuapp.com\",\n  \"assets/01-Tab-Nabbers_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "44bbec77-f868-447e-9ef3-4137be728947",
                "parentUUID": "29fcad8b-557d-43e6-a798-aa42c3f4fa15",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 7244,
            "rootEmpty": false
          },
          {
            "title": "Strict Mode: les, trent, laurie, lisa",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Strict Mode: les, trent, laurie, lisa should render render an app home page",
                "timedOut": false,
                "duration": 2594,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://warm-brushlands-86718.herokuapp.com/\",\n  \"assets/02-Strict-Mode_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "3f5e1e62-d596-40b7-a6c2-61de92cd3295",
                "parentUUID": "28ed5df1-d7e8-485b-9a5c-fe5e9d792c89",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "28ed5df1-d7e8-485b-9a5c-fe5e9d792c89",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Strict Mode: les, trent, laurie, lisa should render render an app home page",
                "timedOut": false,
                "duration": 2594,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://warm-brushlands-86718.herokuapp.com/\",\n  \"assets/02-Strict-Mode_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "3f5e1e62-d596-40b7-a6c2-61de92cd3295",
                "parentUUID": "28ed5df1-d7e8-485b-9a5c-fe5e9d792c89",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2594,
            "rootEmpty": false
          },
          {
            "title": "Major Cache: matt, nicole, cashuna, heather",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Major Cache: matt, nicole, cashuna, heather should render render an app home page",
                "timedOut": false,
                "duration": 5041,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://warm-savannah-50461.herokuapp.com/\",\n  \"assets/03-Major-Cache_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "1b269a90-16eb-4695-97bd-b258a4486467",
                "parentUUID": "b753f8fd-30f6-4a8b-af8b-49731cfd0c72",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "b753f8fd-30f6-4a8b-af8b-49731cfd0c72",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Major Cache: matt, nicole, cashuna, heather should render render an app home page",
                "timedOut": false,
                "duration": 5041,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://warm-savannah-50461.herokuapp.com/\",\n  \"assets/03-Major-Cache_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "1b269a90-16eb-4695-97bd-b258a4486467",
                "parentUUID": "b753f8fd-30f6-4a8b-af8b-49731cfd0c72",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5041,
            "rootEmpty": false
          },
          {
            "title": "Blue Smoke Magicians: usman, marvin, christine, val",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Blue Smoke Magicians: usman, marvin, christine, val should render render an app home page",
                "timedOut": false,
                "duration": 1013,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"http://guarded-oasis-40298.herokuapp.com/\",\n  \"assets/04-Blue-Smoke-Magicians_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "a1a8238a-1280-4b35-b46e-c9a32631f818",
                "parentUUID": "07c899fd-a3fa-487d-b8dd-dce33820317f",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "07c899fd-a3fa-487d-b8dd-dce33820317f",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Blue Smoke Magicians: usman, marvin, christine, val should render render an app home page",
                "timedOut": false,
                "duration": 1013,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"http://guarded-oasis-40298.herokuapp.com/\",\n  \"assets/04-Blue-Smoke-Magicians_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "a1a8238a-1280-4b35-b46e-c9a32631f818",
                "parentUUID": "07c899fd-a3fa-487d-b8dd-dce33820317f",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1013,
            "rootEmpty": false
          },
          {
            "title": "Aluminum Falcons: jesus, seila, roberto, sandy",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Aluminum Falcons: jesus, seila, roberto, sandy should render render an app home page",
                "timedOut": false,
                "duration": 1357,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://cryptic-cove-45695.herokuapp.com/\",\n  \"assets/05-Aluminum-Falcons_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "a81ef3e8-45d2-40af-9caf-36c5035c7c99",
                "parentUUID": "6f5af03a-bf26-475a-9b10-c22b88bcf7a9",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "6f5af03a-bf26-475a-9b10-c22b88bcf7a9",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Aluminum Falcons: jesus, seila, roberto, sandy should render render an app home page",
                "timedOut": false,
                "duration": 1357,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://cryptic-cove-45695.herokuapp.com/\",\n  \"assets/05-Aluminum-Falcons_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "a81ef3e8-45d2-40af-9caf-36c5035c7c99",
                "parentUUID": "6f5af03a-bf26-475a-9b10-c22b88bcf7a9",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1357,
            "rootEmpty": false
          },
          {
            "title": "Fighting Calypso Cookies: alex y, keythe, jimmia, heidi",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Fighting Calypso Cookies: alex y, keythe, jimmia, heidi should render render an app home page",
                "timedOut": false,
                "duration": 1043,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://warm-atoll-35828.herokuapp.com/\",\n  \"assets/06-Fighting-Calypso-Cookies_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "67a1e687-932b-499a-a161-067342448be3",
                "parentUUID": "3fd428d6-13fe-4fdd-86a3-d2b68da3307a",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "3fd428d6-13fe-4fdd-86a3-d2b68da3307a",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Fighting Calypso Cookies: alex y, keythe, jimmia, heidi should render render an app home page",
                "timedOut": false,
                "duration": 1043,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://warm-atoll-35828.herokuapp.com/\",\n  \"assets/06-Fighting-Calypso-Cookies_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "67a1e687-932b-499a-a161-067342448be3",
                "parentUUID": "3fd428d6-13fe-4fdd-86a3-d2b68da3307a",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1043,
            "rootEmpty": false
          },
          {
            "title": "White Hot Snow: john b, brent, igho, monica",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check White Hot Snow: john b, brent, igho, monica should render render an app home page",
                "timedOut": false,
                "duration": 958,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://lit-everglades-62722.herokuapp.com/\",\n  \"assets/07-White-Hot-Snow_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "White Hot Snow deployment is failed at https://lit-everglades-62722.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: White Hot Snow deployment is failed at https://lit-everglades-62722.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "90b72dc2-e6f1-4467-b86d-6a7ef17feede",
                "parentUUID": "5bf47b41-5348-4060-b622-bdad192bfa36",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "5bf47b41-5348-4060-b622-bdad192bfa36",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check White Hot Snow: john b, brent, igho, monica should render render an app home page",
                "timedOut": false,
                "duration": 958,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://lit-everglades-62722.herokuapp.com/\",\n  \"assets/07-White-Hot-Snow_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "White Hot Snow deployment is failed at https://lit-everglades-62722.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: White Hot Snow deployment is failed at https://lit-everglades-62722.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "90b72dc2-e6f1-4467-b86d-6a7ef17feede",
                "parentUUID": "5bf47b41-5348-4060-b622-bdad192bfa36",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 958,
            "rootEmpty": false
          },
          {
            "title": "Bits & Giggles: david, karlos, alex d, zach",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Bits & Giggles: david, karlos, alex d, zach should render render an app home page",
                "timedOut": false,
                "duration": 1109,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://quiet-sea-77471.herokuapp.com\",\n  \"assets/08-Bits-&-Giggles_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com",
                  "generatedMessage": false,
                  "estack": "AssertionError: Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "4e902e2e-fabd-487d-a9d8-04fe1f629c4d",
                "parentUUID": "2007442c-17a0-43e6-ac0c-294e36493cd5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "2007442c-17a0-43e6-ac0c-294e36493cd5",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Bits & Giggles: david, karlos, alex d, zach should render render an app home page",
                "timedOut": false,
                "duration": 1109,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://quiet-sea-77471.herokuapp.com\",\n  \"assets/08-Bits-&-Giggles_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com",
                  "generatedMessage": false,
                  "estack": "AssertionError: Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "4e902e2e-fabd-487d-a9d8-04fe1f629c4d",
                "parentUUID": "2007442c-17a0-43e6-ac0c-294e36493cd5",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1109,
            "rootEmpty": false
          },
          {
            "title": "Massive Confection: nooshin, mike b, michelle, jackie",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Massive Confection: nooshin, mike b, michelle, jackie should render render an app home page",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "",
                  "expected": true,
                  "operator": "==",
                  "message": "Massive Confection has not provided an app deployment url",
                  "generatedMessage": false,
                  "estack": "AssertionError: Massive Confection has not provided an app deployment url\n    at Context.<anonymous> (project2.js:113:18)"
                },
                "isRoot": false,
                "uuid": "62a185f7-8a0b-407a-9f28-a85f2deecb7a",
                "parentUUID": "cb3edb9c-07c2-4e88-a5b1-7d359be581fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "cb3edb9c-07c2-4e88-a5b1-7d359be581fb",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Massive Confection: nooshin, mike b, michelle, jackie should render render an app home page",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "",
                  "expected": true,
                  "operator": "==",
                  "message": "Massive Confection has not provided an app deployment url",
                  "generatedMessage": false,
                  "estack": "AssertionError: Massive Confection has not provided an app deployment url\n    at Context.<anonymous> (project2.js:113:18)"
                },
                "isRoot": false,
                "uuid": "62a185f7-8a0b-407a-9f28-a85f2deecb7a",
                "parentUUID": "cb3edb9c-07c2-4e88-a5b1-7d359be581fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "File Jackers: shakir, eric f, caroline, trenton",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check File Jackers: shakir, eric f, caroline, trenton should render render an app home page",
                "timedOut": false,
                "duration": 1943,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"http://ga-tech.homuncul.us:8081/\",\n  \"assets/10-File-Jackers_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "c1ed348d-74ed-4ab3-98e2-b3b73b081b37",
                "parentUUID": "29156837-ef2a-4677-8a07-055130e7b3a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "29156837-ef2a-4677-8a07-055130e7b3a1",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check File Jackers: shakir, eric f, caroline, trenton should render render an app home page",
                "timedOut": false,
                "duration": 1943,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"http://ga-tech.homuncul.us:8081/\",\n  \"assets/10-File-Jackers_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "c1ed348d-74ed-4ab3-98e2-b3b73b081b37",
                "parentUUID": "29156837-ef2a-4677-8a07-055130e7b3a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1943,
            "rootEmpty": false
          },
          {
            "title": "Midnight Sun Giants: london, andrew, tyler, jameel",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Midnight Sun Giants: london, andrew, tyler, jameel should render render an app home page",
                "timedOut": false,
                "duration": 1308,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://group-project-2.herokuapp.com/\",\n  \"assets/11-Midnight-Sun-Giants_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "63182bb7-0fb4-41db-b68a-9a3ca720a869",
                "parentUUID": "84c6ff6c-34ee-4163-8bf4-1f2d691c8ff5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "84c6ff6c-34ee-4163-8bf4-1f2d691c8ff5",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Midnight Sun Giants: london, andrew, tyler, jameel should render render an app home page",
                "timedOut": false,
                "duration": 1308,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://group-project-2.herokuapp.com/\",\n  \"assets/11-Midnight-Sun-Giants_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "63182bb7-0fb4-41db-b68a-9a3ca720a869",
                "parentUUID": "84c6ff6c-34ee-4163-8bf4-1f2d691c8ff5",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1308,
            "rootEmpty": false
          },
          {
            "title": "Habitual Green Killers: sungbum, jon w, danny, sylvester",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Habitual Green Killers: sungbum, jon w, danny, sylvester should render render an app home page",
                "timedOut": false,
                "duration": 937,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://whispering-eyrie-80456.herokuapp.com/\",\n  \"assets/12-Habitual-Green-Killers_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "54193547-42c7-4231-bf91-1c3a360b2885",
                "parentUUID": "7753fbd5-4883-4ce3-90bc-53bdfa2ec83c",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "7753fbd5-4883-4ce3-90bc-53bdfa2ec83c",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Habitual Green Killers: sungbum, jon w, danny, sylvester should render render an app home page",
                "timedOut": false,
                "duration": 937,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://whispering-eyrie-80456.herokuapp.com/\",\n  \"assets/12-Habitual-Green-Killers_2017-05-15_21.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "54193547-42c7-4231-bf91-1c3a360b2885",
                "parentUUID": "7753fbd5-4883-4ce3-90bc-53bdfa2ec83c",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 937,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/project2.js",
        "uuid": "a2be6114-ea7e-4b69-aa57-fab54343ab69",
        "failedHooks": [],
        "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasFailedHooks": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "a1bff89f-d0c8-4aba-aa85-16fca76b227b",
    "failedHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasFailedHooks": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should render render an app home page",
      "fullTitle": "Illegal Operations: ryan, martin, jieun, emily should render render an app home page",
      "timedOut": false,
      "duration": 999,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://illegal-formation.herokuapp.com/\",\n  \"assets/00-Illegal-Operations_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "614a92e5-7655-4a2a-b7d9-8908fb763ccd",
      "parentUUID": "51e432be-c8f9-4e04-ae4c-11f9d3d40585",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Tab Nabbers: cody, eric g, esterling, ashley should render render an app home page",
      "timedOut": false,
      "duration": 7244,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://bootcruit.herokuapp.com\",\n  \"assets/01-Tab-Nabbers_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "44bbec77-f868-447e-9ef3-4137be728947",
      "parentUUID": "29fcad8b-557d-43e6-a798-aa42c3f4fa15",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Strict Mode: les, trent, laurie, lisa should render render an app home page",
      "timedOut": false,
      "duration": 2594,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://warm-brushlands-86718.herokuapp.com/\",\n  \"assets/02-Strict-Mode_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "3f5e1e62-d596-40b7-a6c2-61de92cd3295",
      "parentUUID": "28ed5df1-d7e8-485b-9a5c-fe5e9d792c89",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Major Cache: matt, nicole, cashuna, heather should render render an app home page",
      "timedOut": false,
      "duration": 5041,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://warm-savannah-50461.herokuapp.com/\",\n  \"assets/03-Major-Cache_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "1b269a90-16eb-4695-97bd-b258a4486467",
      "parentUUID": "b753f8fd-30f6-4a8b-af8b-49731cfd0c72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Blue Smoke Magicians: usman, marvin, christine, val should render render an app home page",
      "timedOut": false,
      "duration": 1013,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"http://guarded-oasis-40298.herokuapp.com/\",\n  \"assets/04-Blue-Smoke-Magicians_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "a1a8238a-1280-4b35-b46e-c9a32631f818",
      "parentUUID": "07c899fd-a3fa-487d-b8dd-dce33820317f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Aluminum Falcons: jesus, seila, roberto, sandy should render render an app home page",
      "timedOut": false,
      "duration": 1357,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://cryptic-cove-45695.herokuapp.com/\",\n  \"assets/05-Aluminum-Falcons_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "a81ef3e8-45d2-40af-9caf-36c5035c7c99",
      "parentUUID": "6f5af03a-bf26-475a-9b10-c22b88bcf7a9",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Fighting Calypso Cookies: alex y, keythe, jimmia, heidi should render render an app home page",
      "timedOut": false,
      "duration": 1043,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://warm-atoll-35828.herokuapp.com/\",\n  \"assets/06-Fighting-Calypso-Cookies_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "67a1e687-932b-499a-a161-067342448be3",
      "parentUUID": "3fd428d6-13fe-4fdd-86a3-d2b68da3307a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "White Hot Snow: john b, brent, igho, monica should render render an app home page",
      "timedOut": false,
      "duration": 958,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://lit-everglades-62722.herokuapp.com/\",\n  \"assets/07-White-Hot-Snow_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "White Hot Snow deployment is failed at https://lit-everglades-62722.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: White Hot Snow deployment is failed at https://lit-everglades-62722.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "90b72dc2-e6f1-4467-b86d-6a7ef17feede",
      "parentUUID": "5bf47b41-5348-4060-b622-bdad192bfa36",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Bits & Giggles: david, karlos, alex d, zach should render render an app home page",
      "timedOut": false,
      "duration": 1109,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://quiet-sea-77471.herokuapp.com\",\n  \"assets/08-Bits-&-Giggles_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com",
        "generatedMessage": false,
        "estack": "AssertionError: Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "4e902e2e-fabd-487d-a9d8-04fe1f629c4d",
      "parentUUID": "2007442c-17a0-43e6-ac0c-294e36493cd5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Massive Confection: nooshin, mike b, michelle, jackie should render render an app home page",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "",
        "expected": true,
        "operator": "==",
        "message": "Massive Confection has not provided an app deployment url",
        "generatedMessage": false,
        "estack": "AssertionError: Massive Confection has not provided an app deployment url\n    at Context.<anonymous> (project2.js:113:18)"
      },
      "isRoot": false,
      "uuid": "62a185f7-8a0b-407a-9f28-a85f2deecb7a",
      "parentUUID": "cb3edb9c-07c2-4e88-a5b1-7d359be581fb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "File Jackers: shakir, eric f, caroline, trenton should render render an app home page",
      "timedOut": false,
      "duration": 1943,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"http://ga-tech.homuncul.us:8081/\",\n  \"assets/10-File-Jackers_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "c1ed348d-74ed-4ab3-98e2-b3b73b081b37",
      "parentUUID": "29156837-ef2a-4677-8a07-055130e7b3a1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Midnight Sun Giants: london, andrew, tyler, jameel should render render an app home page",
      "timedOut": false,
      "duration": 1308,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://group-project-2.herokuapp.com/\",\n  \"assets/11-Midnight-Sun-Giants_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "63182bb7-0fb4-41db-b68a-9a3ca720a869",
      "parentUUID": "84c6ff6c-34ee-4163-8bf4-1f2d691c8ff5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Habitual Green Killers: sungbum, jon w, danny, sylvester should render render an app home page",
      "timedOut": false,
      "duration": 937,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://whispering-eyrie-80456.herokuapp.com/\",\n  \"assets/12-Habitual-Green-Killers_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "54193547-42c7-4231-bf91-1c3a360b2885",
      "parentUUID": "7753fbd5-4883-4ce3-90bc-53bdfa2ec83c",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should render render an app home page",
      "fullTitle": "Tab Nabbers: cody, eric g, esterling, ashley should render render an app home page",
      "timedOut": false,
      "duration": 7244,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://bootcruit.herokuapp.com\",\n  \"assets/01-Tab-Nabbers_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "44bbec77-f868-447e-9ef3-4137be728947",
      "parentUUID": "29fcad8b-557d-43e6-a798-aa42c3f4fa15",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Strict Mode: les, trent, laurie, lisa should render render an app home page",
      "timedOut": false,
      "duration": 2594,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://warm-brushlands-86718.herokuapp.com/\",\n  \"assets/02-Strict-Mode_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "3f5e1e62-d596-40b7-a6c2-61de92cd3295",
      "parentUUID": "28ed5df1-d7e8-485b-9a5c-fe5e9d792c89",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Major Cache: matt, nicole, cashuna, heather should render render an app home page",
      "timedOut": false,
      "duration": 5041,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://warm-savannah-50461.herokuapp.com/\",\n  \"assets/03-Major-Cache_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "1b269a90-16eb-4695-97bd-b258a4486467",
      "parentUUID": "b753f8fd-30f6-4a8b-af8b-49731cfd0c72",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "File Jackers: shakir, eric f, caroline, trenton should render render an app home page",
      "timedOut": false,
      "duration": 1943,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"http://ga-tech.homuncul.us:8081/\",\n  \"assets/10-File-Jackers_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "c1ed348d-74ed-4ab3-98e2-b3b73b081b37",
      "parentUUID": "29156837-ef2a-4677-8a07-055130e7b3a1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Midnight Sun Giants: london, andrew, tyler, jameel should render render an app home page",
      "timedOut": false,
      "duration": 1308,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://group-project-2.herokuapp.com/\",\n  \"assets/11-Midnight-Sun-Giants_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "63182bb7-0fb4-41db-b68a-9a3ca720a869",
      "parentUUID": "84c6ff6c-34ee-4163-8bf4-1f2d691c8ff5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Habitual Green Killers: sungbum, jon w, danny, sylvester should render render an app home page",
      "timedOut": false,
      "duration": 937,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://whispering-eyrie-80456.herokuapp.com/\",\n  \"assets/12-Habitual-Green-Killers_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "54193547-42c7-4231-bf91-1c3a360b2885",
      "parentUUID": "7753fbd5-4883-4ce3-90bc-53bdfa2ec83c",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "should render render an app home page",
      "fullTitle": "Illegal Operations: ryan, martin, jieun, emily should render render an app home page",
      "timedOut": false,
      "duration": 999,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://illegal-formation.herokuapp.com/\",\n  \"assets/00-Illegal-Operations_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "614a92e5-7655-4a2a-b7d9-8908fb763ccd",
      "parentUUID": "51e432be-c8f9-4e04-ae4c-11f9d3d40585",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Blue Smoke Magicians: usman, marvin, christine, val should render render an app home page",
      "timedOut": false,
      "duration": 1013,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"http://guarded-oasis-40298.herokuapp.com/\",\n  \"assets/04-Blue-Smoke-Magicians_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "a1a8238a-1280-4b35-b46e-c9a32631f818",
      "parentUUID": "07c899fd-a3fa-487d-b8dd-dce33820317f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Aluminum Falcons: jesus, seila, roberto, sandy should render render an app home page",
      "timedOut": false,
      "duration": 1357,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://cryptic-cove-45695.herokuapp.com/\",\n  \"assets/05-Aluminum-Falcons_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "a81ef3e8-45d2-40af-9caf-36c5035c7c99",
      "parentUUID": "6f5af03a-bf26-475a-9b10-c22b88bcf7a9",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Fighting Calypso Cookies: alex y, keythe, jimmia, heidi should render render an app home page",
      "timedOut": false,
      "duration": 1043,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://warm-atoll-35828.herokuapp.com/\",\n  \"assets/06-Fighting-Calypso-Cookies_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "67a1e687-932b-499a-a161-067342448be3",
      "parentUUID": "3fd428d6-13fe-4fdd-86a3-d2b68da3307a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "White Hot Snow: john b, brent, igho, monica should render render an app home page",
      "timedOut": false,
      "duration": 958,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://lit-everglades-62722.herokuapp.com/\",\n  \"assets/07-White-Hot-Snow_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "White Hot Snow deployment is failed at https://lit-everglades-62722.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: White Hot Snow deployment is failed at https://lit-everglades-62722.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "90b72dc2-e6f1-4467-b86d-6a7ef17feede",
      "parentUUID": "5bf47b41-5348-4060-b622-bdad192bfa36",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Bits & Giggles: david, karlos, alex d, zach should render render an app home page",
      "timedOut": false,
      "duration": 1109,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://quiet-sea-77471.herokuapp.com\",\n  \"assets/08-Bits-&-Giggles_2017-05-15_21.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com",
        "generatedMessage": false,
        "estack": "AssertionError: Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "4e902e2e-fabd-487d-a9d8-04fe1f629c4d",
      "parentUUID": "2007442c-17a0-43e6-ac0c-294e36493cd5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Massive Confection: nooshin, mike b, michelle, jackie should render render an app home page",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : false })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "",
        "expected": true,
        "operator": "==",
        "message": "Massive Confection has not provided an app deployment url",
        "generatedMessage": false,
        "estack": "AssertionError: Massive Confection has not provided an app deployment url\n    at Context.<anonymous> (project2.js:113:18)"
      },
      "isRoot": false,
      "uuid": "62a185f7-8a0b-407a-9f28-a85f2deecb7a",
      "parentUUID": "cb3edb9c-07c2-4e88-a5b1-7d359be581fb",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}