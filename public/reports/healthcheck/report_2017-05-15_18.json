{
  "stats": {
    "suites": 14,
    "tests": 13,
    "passes": 3,
    "pending": 0,
    "failures": 10,
    "start": "2017-05-15T22:45:42.831Z",
    "end": "2017-05-15T22:46:38.995Z",
    "duration": 56164,
    "testsRegistered": 13,
    "passPercent": 23.1,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Project 2 Health Check",
        "suites": [
          {
            "title": "Illegal Operations: ryan, martin, jieun, emily",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Illegal Operations: ryan, martin, jieun, emily should render render an app home page",
                "timedOut": false,
                "duration": 8328,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://illegal-formation.herokuapp.com/\",\n  \"assets/00-Illegal-Operations_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "afc0fb6f-2d08-4e86-bf17-edf00f4f43b4",
                "parentUUID": "a9770a3c-c652-4794-b662-a5fcd11669e1",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "a9770a3c-c652-4794-b662-a5fcd11669e1",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Illegal Operations: ryan, martin, jieun, emily should render render an app home page",
                "timedOut": false,
                "duration": 8328,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://illegal-formation.herokuapp.com/\",\n  \"assets/00-Illegal-Operations_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "afc0fb6f-2d08-4e86-bf17-edf00f4f43b4",
                "parentUUID": "a9770a3c-c652-4794-b662-a5fcd11669e1",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8328,
            "rootEmpty": false
          },
          {
            "title": "Tab Nabbers: cody, eric g, esterling, ashley",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Tab Nabbers: cody, eric g, esterling, ashley should render render an app home page",
                "timedOut": false,
                "duration": 1514,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://bootcruit.herokuapp.com\",\n  \"assets/01-Tab-Nabbers_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "9091d2fd-9f53-4bb7-88ac-498fe8fb9ce7",
                "parentUUID": "bb40a367-a4f3-45fd-8f5d-88a284fe3f43",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "bb40a367-a4f3-45fd-8f5d-88a284fe3f43",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Tab Nabbers: cody, eric g, esterling, ashley should render render an app home page",
                "timedOut": false,
                "duration": 1514,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://bootcruit.herokuapp.com\",\n  \"assets/01-Tab-Nabbers_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "9091d2fd-9f53-4bb7-88ac-498fe8fb9ce7",
                "parentUUID": "bb40a367-a4f3-45fd-8f5d-88a284fe3f43",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1514,
            "rootEmpty": false
          },
          {
            "title": "Strict Mode: les, trent, laurie, lisa",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Strict Mode: les, trent, laurie, lisa should render render an app home page",
                "timedOut": true,
                "duration": 10003,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://warm-brushlands-86718.herokuapp.com/\",\n  \"assets/02-Strict-Mode_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "48643490-2400-4fa7-963a-69acff902d58",
                "parentUUID": "bf136234-fa2c-47e6-ae68-afd310679ab0",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "bf136234-fa2c-47e6-ae68-afd310679ab0",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Strict Mode: les, trent, laurie, lisa should render render an app home page",
                "timedOut": true,
                "duration": 10003,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://warm-brushlands-86718.herokuapp.com/\",\n  \"assets/02-Strict-Mode_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "48643490-2400-4fa7-963a-69acff902d58",
                "parentUUID": "bf136234-fa2c-47e6-ae68-afd310679ab0",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 10003,
            "rootEmpty": false
          },
          {
            "title": "Major Cache: matt, nicole, cashuna, heather",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Major Cache: matt, nicole, cashuna, heather should render render an app home page",
                "timedOut": false,
                "duration": 1566,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://warm-savannah-50461.herokuapp.com/\",\n  \"assets/03-Major-Cache_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Major Cache deployment is failed at https://warm-savannah-50461.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Major Cache deployment is failed at https://warm-savannah-50461.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "3fd3d323-46bc-48eb-bcfe-c059b22bf38d",
                "parentUUID": "c8ba4977-f387-4d8b-a45f-a7065fea2795",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "c8ba4977-f387-4d8b-a45f-a7065fea2795",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Major Cache: matt, nicole, cashuna, heather should render render an app home page",
                "timedOut": false,
                "duration": 1566,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://warm-savannah-50461.herokuapp.com/\",\n  \"assets/03-Major-Cache_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Major Cache deployment is failed at https://warm-savannah-50461.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Major Cache deployment is failed at https://warm-savannah-50461.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "3fd3d323-46bc-48eb-bcfe-c059b22bf38d",
                "parentUUID": "c8ba4977-f387-4d8b-a45f-a7065fea2795",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1566,
            "rootEmpty": false
          },
          {
            "title": "Blue Smoke Magicians: usman, marvin, christine, val",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Blue Smoke Magicians: usman, marvin, christine, val should render render an app home page",
                "timedOut": false,
                "duration": 1095,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"http://guarded-oasis-40298.herokuapp.com/\",\n  \"assets/04-Blue-Smoke-Magicians_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "fd1fc4ba-0566-4a0e-88aa-492fedfb795a",
                "parentUUID": "fe52050f-e781-4659-a19d-394814264e0c",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "fe52050f-e781-4659-a19d-394814264e0c",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Blue Smoke Magicians: usman, marvin, christine, val should render render an app home page",
                "timedOut": false,
                "duration": 1095,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"http://guarded-oasis-40298.herokuapp.com/\",\n  \"assets/04-Blue-Smoke-Magicians_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "fd1fc4ba-0566-4a0e-88aa-492fedfb795a",
                "parentUUID": "fe52050f-e781-4659-a19d-394814264e0c",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1095,
            "rootEmpty": false
          },
          {
            "title": "Aluminum Falcons: jesus, seila, roberto, sandy",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Aluminum Falcons: jesus, seila, roberto, sandy should render render an app home page",
                "timedOut": false,
                "duration": 1138,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://cryptic-cove-45695.herokuapp.com/\",\n  \"assets/05-Aluminum-Falcons_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "5552acde-51b2-4dfa-aaf6-057556e8d26b",
                "parentUUID": "197d4955-c5ba-4a66-9a03-0921ce42bc25",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "197d4955-c5ba-4a66-9a03-0921ce42bc25",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Aluminum Falcons: jesus, seila, roberto, sandy should render render an app home page",
                "timedOut": false,
                "duration": 1138,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://cryptic-cove-45695.herokuapp.com/\",\n  \"assets/05-Aluminum-Falcons_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "5552acde-51b2-4dfa-aaf6-057556e8d26b",
                "parentUUID": "197d4955-c5ba-4a66-9a03-0921ce42bc25",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1138,
            "rootEmpty": false
          },
          {
            "title": "Fighting Calypso Cookies: alex y, keythe, jimmia, heidi",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Fighting Calypso Cookies: alex y, keythe, jimmia, heidi should render render an app home page",
                "timedOut": false,
                "duration": 1179,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://warm-atoll-35828.herokuapp.com/\",\n  \"assets/06-Fighting-Calypso-Cookies_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "367ac17f-e9c3-4120-9f22-260b6a9371bf",
                "parentUUID": "dd9cf32b-9d10-4ff0-8236-0ccfeb910445",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "dd9cf32b-9d10-4ff0-8236-0ccfeb910445",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Fighting Calypso Cookies: alex y, keythe, jimmia, heidi should render render an app home page",
                "timedOut": false,
                "duration": 1179,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://warm-atoll-35828.herokuapp.com/\",\n  \"assets/06-Fighting-Calypso-Cookies_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/",
                  "generatedMessage": false,
                  "estack": "AssertionError: Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "367ac17f-e9c3-4120-9f22-260b6a9371bf",
                "parentUUID": "dd9cf32b-9d10-4ff0-8236-0ccfeb910445",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1179,
            "rootEmpty": false
          },
          {
            "title": "White Hot Snow: john b, brent, igho, monica",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check White Hot Snow: john b, brent, igho, monica should render render an app home page",
                "timedOut": true,
                "duration": 10001,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://lit-everglades-62722.herokuapp.com/\",\n  \"assets/07-White-Hot-Snow_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "f083b505-743c-43c3-8937-02ad0a455a51",
                "parentUUID": "6de30a2c-49ed-45fb-a188-c6444fada491",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "6de30a2c-49ed-45fb-a188-c6444fada491",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check White Hot Snow: john b, brent, igho, monica should render render an app home page",
                "timedOut": true,
                "duration": 10001,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://lit-everglades-62722.herokuapp.com/\",\n  \"assets/07-White-Hot-Snow_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "f083b505-743c-43c3-8937-02ad0a455a51",
                "parentUUID": "6de30a2c-49ed-45fb-a188-c6444fada491",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 10001,
            "rootEmpty": false
          },
          {
            "title": "Bits & Giggles: david, karlos, alex d, zach",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Bits & Giggles: david, karlos, alex d, zach should render render an app home page",
                "timedOut": false,
                "duration": 1291,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://quiet-sea-77471.herokuapp.com\",\n  \"assets/08-Bits-&-Giggles_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com",
                  "generatedMessage": false,
                  "estack": "AssertionError: Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "1e66e9d9-d08d-4974-aa74-dae1432723cd",
                "parentUUID": "818c973f-9170-4705-8e80-669645acbc47",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "818c973f-9170-4705-8e80-669645acbc47",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Bits & Giggles: david, karlos, alex d, zach should render render an app home page",
                "timedOut": false,
                "duration": 1291,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://quiet-sea-77471.herokuapp.com\",\n  \"assets/08-Bits-&-Giggles_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "false",
                  "expected": "true",
                  "operator": "==",
                  "message": "Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com",
                  "generatedMessage": false,
                  "estack": "AssertionError: Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
                  "diff": "- false\n+ true\n"
                },
                "isRoot": false,
                "uuid": "1e66e9d9-d08d-4974-aa74-dae1432723cd",
                "parentUUID": "818c973f-9170-4705-8e80-669645acbc47",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1291,
            "rootEmpty": false
          },
          {
            "title": "Massive Confection: nooshin, mike b, michelle, jackie",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Massive Confection: nooshin, mike b, michelle, jackie should render render an app home page",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "",
                  "expected": true,
                  "operator": "==",
                  "message": "Massive Confection has not provided an app deployment url",
                  "generatedMessage": false,
                  "estack": "AssertionError: Massive Confection has not provided an app deployment url\n    at Context.<anonymous> (project2.js:113:18)"
                },
                "isRoot": false,
                "uuid": "b598b664-a7bc-4add-80ae-2ed6adb23d95",
                "parentUUID": "0ba4acad-8866-4fe2-99b6-51f63377a25e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "0ba4acad-8866-4fe2-99b6-51f63377a25e",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Massive Confection: nooshin, mike b, michelle, jackie should render render an app home page",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "name": "AssertionError",
                  "actual": "",
                  "expected": true,
                  "operator": "==",
                  "message": "Massive Confection has not provided an app deployment url",
                  "generatedMessage": false,
                  "estack": "AssertionError: Massive Confection has not provided an app deployment url\n    at Context.<anonymous> (project2.js:113:18)"
                },
                "isRoot": false,
                "uuid": "b598b664-a7bc-4add-80ae-2ed6adb23d95",
                "parentUUID": "0ba4acad-8866-4fe2-99b6-51f63377a25e",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "File Jackers: shakir, eric f, caroline, trenton",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check File Jackers: shakir, eric f, caroline, trenton should render render an app home page",
                "timedOut": false,
                "duration": 1738,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"http://ga-tech.homuncul.us:8081/\",\n  \"assets/10-File-Jackers_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "425c5b79-8295-41c5-8d6c-95cdc23ad59e",
                "parentUUID": "1e5bf200-1dd6-41b5-a5ec-59148130dabe",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "1e5bf200-1dd6-41b5-a5ec-59148130dabe",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check File Jackers: shakir, eric f, caroline, trenton should render render an app home page",
                "timedOut": false,
                "duration": 1738,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"http://ga-tech.homuncul.us:8081/\",\n  \"assets/10-File-Jackers_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "425c5b79-8295-41c5-8d6c-95cdc23ad59e",
                "parentUUID": "1e5bf200-1dd6-41b5-a5ec-59148130dabe",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1738,
            "rootEmpty": false
          },
          {
            "title": "Midnight Sun Giants: london, andrew, tyler, jameel",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Midnight Sun Giants: london, andrew, tyler, jameel should render render an app home page",
                "timedOut": true,
                "duration": 10003,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://group-project-2.herokuapp.com/\",\n  \"assets/11-Midnight-Sun-Giants_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "77aab0c5-d28d-45a8-a078-bbecf7a0dcab",
                "parentUUID": "7838b2c5-ad84-4c4c-9ce9-179dfe31c3d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "7838b2c5-ad84-4c4c-9ce9-179dfe31c3d5",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [],
            "failures": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Midnight Sun Giants: london, andrew, tyler, jameel should render render an app home page",
                "timedOut": true,
                "duration": 10003,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "[\n  \"https://group-project-2.herokuapp.com/\",\n  \"assets/11-Midnight-Sun-Giants_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {
                  "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "77aab0c5-d28d-45a8-a078-bbecf7a0dcab",
                "parentUUID": "7838b2c5-ad84-4c4c-9ce9-179dfe31c3d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 10003,
            "rootEmpty": false
          },
          {
            "title": "Habitual Green Killers: sungbum, jon w, danny, sylvester",
            "suites": [],
            "tests": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Habitual Green Killers: sungbum, jon w, danny, sylvester should render render an app home page",
                "timedOut": false,
                "duration": 8286,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://whispering-eyrie-80456.herokuapp.com/\",\n  \"assets/12-Habitual-Green-Killers_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "56d70906-47b0-4af7-9129-3560dd971c32",
                "parentUUID": "39c0f7b0-e98d-4d96-a740-f9ec7f8ab367",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/project2.js",
            "uuid": "39c0f7b0-e98d-4d96-a740-f9ec7f8ab367",
            "failedHooks": [],
            "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
            "passes": [
              {
                "title": "should render render an app home page",
                "fullTitle": "Project 2 Health Check Habitual Green Killers: sungbum, jon w, danny, sylvester should render render an app home page",
                "timedOut": false,
                "duration": 8286,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "[\n  \"https://whispering-eyrie-80456.herokuapp.com/\",\n  \"assets/12-Habitual-Green-Killers_2017-05-15_18.png\"\n]",
                "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "56d70906-47b0-4af7-9129-3560dd971c32",
                "parentUUID": "39c0f7b0-e98d-4d96-a740-f9ec7f8ab367",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8286,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/project2.js",
        "uuid": "5eee3fcf-0bfe-4355-9cb9-eba58874f186",
        "failedHooks": [],
        "fullFile": "/Users/mrmusa/gt/healthcheck/project2.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasFailedHooks": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "91c1cc4c-587c-4c6d-a77f-a403841de43a",
    "failedHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasFailedHooks": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should render render an app home page",
      "fullTitle": "Illegal Operations: ryan, martin, jieun, emily should render render an app home page",
      "timedOut": false,
      "duration": 8328,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://illegal-formation.herokuapp.com/\",\n  \"assets/00-Illegal-Operations_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "afc0fb6f-2d08-4e86-bf17-edf00f4f43b4",
      "parentUUID": "a9770a3c-c652-4794-b662-a5fcd11669e1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Tab Nabbers: cody, eric g, esterling, ashley should render render an app home page",
      "timedOut": false,
      "duration": 1514,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://bootcruit.herokuapp.com\",\n  \"assets/01-Tab-Nabbers_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "9091d2fd-9f53-4bb7-88ac-498fe8fb9ce7",
      "parentUUID": "bb40a367-a4f3-45fd-8f5d-88a284fe3f43",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Strict Mode: les, trent, laurie, lisa should render render an app home page",
      "timedOut": true,
      "duration": 10003,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://warm-brushlands-86718.herokuapp.com/\",\n  \"assets/02-Strict-Mode_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "48643490-2400-4fa7-963a-69acff902d58",
      "parentUUID": "bf136234-fa2c-47e6-ae68-afd310679ab0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Major Cache: matt, nicole, cashuna, heather should render render an app home page",
      "timedOut": false,
      "duration": 1566,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://warm-savannah-50461.herokuapp.com/\",\n  \"assets/03-Major-Cache_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Major Cache deployment is failed at https://warm-savannah-50461.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Major Cache deployment is failed at https://warm-savannah-50461.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "3fd3d323-46bc-48eb-bcfe-c059b22bf38d",
      "parentUUID": "c8ba4977-f387-4d8b-a45f-a7065fea2795",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Blue Smoke Magicians: usman, marvin, christine, val should render render an app home page",
      "timedOut": false,
      "duration": 1095,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"http://guarded-oasis-40298.herokuapp.com/\",\n  \"assets/04-Blue-Smoke-Magicians_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "fd1fc4ba-0566-4a0e-88aa-492fedfb795a",
      "parentUUID": "fe52050f-e781-4659-a19d-394814264e0c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Aluminum Falcons: jesus, seila, roberto, sandy should render render an app home page",
      "timedOut": false,
      "duration": 1138,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://cryptic-cove-45695.herokuapp.com/\",\n  \"assets/05-Aluminum-Falcons_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "5552acde-51b2-4dfa-aaf6-057556e8d26b",
      "parentUUID": "197d4955-c5ba-4a66-9a03-0921ce42bc25",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Fighting Calypso Cookies: alex y, keythe, jimmia, heidi should render render an app home page",
      "timedOut": false,
      "duration": 1179,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://warm-atoll-35828.herokuapp.com/\",\n  \"assets/06-Fighting-Calypso-Cookies_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "367ac17f-e9c3-4120-9f22-260b6a9371bf",
      "parentUUID": "dd9cf32b-9d10-4ff0-8236-0ccfeb910445",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "White Hot Snow: john b, brent, igho, monica should render render an app home page",
      "timedOut": true,
      "duration": 10001,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://lit-everglades-62722.herokuapp.com/\",\n  \"assets/07-White-Hot-Snow_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "f083b505-743c-43c3-8937-02ad0a455a51",
      "parentUUID": "6de30a2c-49ed-45fb-a188-c6444fada491",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Bits & Giggles: david, karlos, alex d, zach should render render an app home page",
      "timedOut": false,
      "duration": 1291,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://quiet-sea-77471.herokuapp.com\",\n  \"assets/08-Bits-&-Giggles_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com",
        "generatedMessage": false,
        "estack": "AssertionError: Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "1e66e9d9-d08d-4974-aa74-dae1432723cd",
      "parentUUID": "818c973f-9170-4705-8e80-669645acbc47",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Massive Confection: nooshin, mike b, michelle, jackie should render render an app home page",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "",
        "expected": true,
        "operator": "==",
        "message": "Massive Confection has not provided an app deployment url",
        "generatedMessage": false,
        "estack": "AssertionError: Massive Confection has not provided an app deployment url\n    at Context.<anonymous> (project2.js:113:18)"
      },
      "isRoot": false,
      "uuid": "b598b664-a7bc-4add-80ae-2ed6adb23d95",
      "parentUUID": "0ba4acad-8866-4fe2-99b6-51f63377a25e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "File Jackers: shakir, eric f, caroline, trenton should render render an app home page",
      "timedOut": false,
      "duration": 1738,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"http://ga-tech.homuncul.us:8081/\",\n  \"assets/10-File-Jackers_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "425c5b79-8295-41c5-8d6c-95cdc23ad59e",
      "parentUUID": "1e5bf200-1dd6-41b5-a5ec-59148130dabe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Midnight Sun Giants: london, andrew, tyler, jameel should render render an app home page",
      "timedOut": true,
      "duration": 10003,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://group-project-2.herokuapp.com/\",\n  \"assets/11-Midnight-Sun-Giants_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "77aab0c5-d28d-45a8-a078-bbecf7a0dcab",
      "parentUUID": "7838b2c5-ad84-4c4c-9ce9-179dfe31c3d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Habitual Green Killers: sungbum, jon w, danny, sylvester should render render an app home page",
      "timedOut": false,
      "duration": 8286,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://whispering-eyrie-80456.herokuapp.com/\",\n  \"assets/12-Habitual-Green-Killers_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "56d70906-47b0-4af7-9129-3560dd971c32",
      "parentUUID": "39c0f7b0-e98d-4d96-a740-f9ec7f8ab367",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should render render an app home page",
      "fullTitle": "Tab Nabbers: cody, eric g, esterling, ashley should render render an app home page",
      "timedOut": false,
      "duration": 1514,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://bootcruit.herokuapp.com\",\n  \"assets/01-Tab-Nabbers_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "9091d2fd-9f53-4bb7-88ac-498fe8fb9ce7",
      "parentUUID": "bb40a367-a4f3-45fd-8f5d-88a284fe3f43",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "File Jackers: shakir, eric f, caroline, trenton should render render an app home page",
      "timedOut": false,
      "duration": 1738,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"http://ga-tech.homuncul.us:8081/\",\n  \"assets/10-File-Jackers_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "425c5b79-8295-41c5-8d6c-95cdc23ad59e",
      "parentUUID": "1e5bf200-1dd6-41b5-a5ec-59148130dabe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Habitual Green Killers: sungbum, jon w, danny, sylvester should render render an app home page",
      "timedOut": false,
      "duration": 8286,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"https://whispering-eyrie-80456.herokuapp.com/\",\n  \"assets/12-Habitual-Green-Killers_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {},
      "isRoot": false,
      "uuid": "56d70906-47b0-4af7-9129-3560dd971c32",
      "parentUUID": "39c0f7b0-e98d-4d96-a740-f9ec7f8ab367",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "should render render an app home page",
      "fullTitle": "Illegal Operations: ryan, martin, jieun, emily should render render an app home page",
      "timedOut": false,
      "duration": 8328,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://illegal-formation.herokuapp.com/\",\n  \"assets/00-Illegal-Operations_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Illegal Operations deployment is failed at https://illegal-formation.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "afc0fb6f-2d08-4e86-bf17-edf00f4f43b4",
      "parentUUID": "a9770a3c-c652-4794-b662-a5fcd11669e1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Strict Mode: les, trent, laurie, lisa should render render an app home page",
      "timedOut": true,
      "duration": 10003,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://warm-brushlands-86718.herokuapp.com/\",\n  \"assets/02-Strict-Mode_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "48643490-2400-4fa7-963a-69acff902d58",
      "parentUUID": "bf136234-fa2c-47e6-ae68-afd310679ab0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Major Cache: matt, nicole, cashuna, heather should render render an app home page",
      "timedOut": false,
      "duration": 1566,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://warm-savannah-50461.herokuapp.com/\",\n  \"assets/03-Major-Cache_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Major Cache deployment is failed at https://warm-savannah-50461.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Major Cache deployment is failed at https://warm-savannah-50461.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "3fd3d323-46bc-48eb-bcfe-c059b22bf38d",
      "parentUUID": "c8ba4977-f387-4d8b-a45f-a7065fea2795",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Blue Smoke Magicians: usman, marvin, christine, val should render render an app home page",
      "timedOut": false,
      "duration": 1095,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"http://guarded-oasis-40298.herokuapp.com/\",\n  \"assets/04-Blue-Smoke-Magicians_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Blue Smoke Magicians deployment is failed at http://guarded-oasis-40298.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "fd1fc4ba-0566-4a0e-88aa-492fedfb795a",
      "parentUUID": "fe52050f-e781-4659-a19d-394814264e0c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Aluminum Falcons: jesus, seila, roberto, sandy should render render an app home page",
      "timedOut": false,
      "duration": 1138,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://cryptic-cove-45695.herokuapp.com/\",\n  \"assets/05-Aluminum-Falcons_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Aluminum Falcons deployment is failed at https://cryptic-cove-45695.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "5552acde-51b2-4dfa-aaf6-057556e8d26b",
      "parentUUID": "197d4955-c5ba-4a66-9a03-0921ce42bc25",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Fighting Calypso Cookies: alex y, keythe, jimmia, heidi should render render an app home page",
      "timedOut": false,
      "duration": 1179,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://warm-atoll-35828.herokuapp.com/\",\n  \"assets/06-Fighting-Calypso-Cookies_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/",
        "generatedMessage": false,
        "estack": "AssertionError: Fighting Calypso Cookies deployment is failed at https://warm-atoll-35828.herokuapp.com/\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "367ac17f-e9c3-4120-9f22-260b6a9371bf",
      "parentUUID": "dd9cf32b-9d10-4ff0-8236-0ccfeb910445",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "White Hot Snow: john b, brent, igho, monica should render render an app home page",
      "timedOut": true,
      "duration": 10001,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://lit-everglades-62722.herokuapp.com/\",\n  \"assets/07-White-Hot-Snow_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "f083b505-743c-43c3-8937-02ad0a455a51",
      "parentUUID": "6de30a2c-49ed-45fb-a188-c6444fada491",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Bits & Giggles: david, karlos, alex d, zach should render render an app home page",
      "timedOut": false,
      "duration": 1291,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://quiet-sea-77471.herokuapp.com\",\n  \"assets/08-Bits-&-Giggles_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "false",
        "expected": "true",
        "operator": "==",
        "message": "Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com",
        "generatedMessage": false,
        "estack": "AssertionError: Bits & Giggles deployment is failed at https://quiet-sea-77471.herokuapp.com\n    at Nightmare.goto.viewport.screenshot.evaluate.then.title (project2.js:108:22)\n    at process._tickCallback (internal/process/next_tick.js:103:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "1e66e9d9-d08d-4974-aa74-dae1432723cd",
      "parentUUID": "818c973f-9170-4705-8e80-669645acbc47",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Massive Confection: nooshin, mike b, michelle, jackie should render render an app home page",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "name": "AssertionError",
        "actual": "",
        "expected": true,
        "operator": "==",
        "message": "Massive Confection has not provided an app deployment url",
        "generatedMessage": false,
        "estack": "AssertionError: Massive Confection has not provided an app deployment url\n    at Context.<anonymous> (project2.js:113:18)"
      },
      "isRoot": false,
      "uuid": "b598b664-a7bc-4add-80ae-2ed6adb23d95",
      "parentUUID": "0ba4acad-8866-4fe2-99b6-51f63377a25e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render render an app home page",
      "fullTitle": "Midnight Sun Giants: london, andrew, tyler, jameel should render render an app home page",
      "timedOut": true,
      "duration": 10003,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "[\n  \"https://group-project-2.herokuapp.com/\",\n  \"assets/11-Midnight-Sun-Giants_2017-05-15_18.png\"\n]",
      "code": "if (app) {\n  const imagePath = path.join('assets', `${('00' + index).slice(-2)}-${team.replace(/ /ig, '-')}_${moment().format('YYYY-MM-DD_HH')}.png`);\n  // context can be a url and the report will create a link\n  addContext(this, app);\n  // context can be an image url and the report will show it inline\n  addContext(this, imagePath);\n  Nightmare({ show : true })\n    .goto(app)\n    .viewport(1024, 768)\n    .screenshot(path.join(__dirname, 'public', imagePath))\n    .evaluate(() => document.title)\n    .then(title => {\n      const failed = ['Heroku | Welcome to your new app!', 'Application Error', 'Error'].includes(title);\n      assert.ok(!failed, `${team} deployment is failed at ${app}`);\n    })\n    .catch(err => err)\n    .then(done)\n} else {\n  assert.ok(app, `${team} has not provided an app deployment url`);\n}",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "77aab0c5-d28d-45a8-a078-bbecf7a0dcab",
      "parentUUID": "7838b2c5-ad84-4c4c-9ce9-179dfe31c3d5",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}